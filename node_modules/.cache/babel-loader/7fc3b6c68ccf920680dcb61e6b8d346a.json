{"ast":null,"code":"import { connect } from 'react-redux';\nimport { deletePost, createPost, showForm, showUpdateForm, updatePost, showPostDetail, setPostsFilter } from '../../actions';\nimport Button from '../../components/Buttons/Button';\nimport { put, takeEvery } from 'redux-saga/effects';\nimport { FormDataText } from '../Form';\nimport action from '../../index';\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    classes: ownProps.classes,\n    result: getButtonText(state, ownProps)\n  };\n}\n/**\n * Set text for \"show/hide form\" button\n * ( if this button have prop 'showElement')\n *\n * @param state\n * @param ownProps\n * @returns {string|*}\n */\n\n\nfunction getButtonText(state, ownProps) {\n  if (!ownProps.showElement) {\n    return ownProps.buttonText;\n  }\n\n  let formState = state.form.filter(v => v.showElement === ownProps.showElement).pop();\n\n  if (!formState) {\n    return ownProps.buttonText;\n  }\n\n  return formState.enabled ? FormDataText.hideForm : ownProps.buttonText;\n}\n\nfunction* hide() {\n  yield put(showForm('form-element-1'));\n}\n\nexport function* doubleAction() {\n  yield takeEvery('CREATE_POST', hide);\n}\n/**\n *\n * mapDispatchToProps\n * adds event to our prop. We can use it from Button component as well.\n *\n * @param dispatch\n * @param ownProps\n * @returns {{onClick(): (*|*|*|*|*|*|*)}|*}\n */\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n  return {\n    onClick() {\n      if (ownProps.redirrectTo !== undefined) {\n        window.location.href = \"/mainPage\";\n        return;\n      }\n\n      let action = ownProps.action;\n\n      switch (action) {\n        case 'showForm':\n          return dispatch(showForm(ownProps.showElement));\n\n        case 'createPost':\n          return dispatch(createPost(ownProps.title, ownProps.text));\n\n        case 'deletePost':\n          return dispatch(deletePost(ownProps.id));\n\n        case 'updatePost':\n          return dispatch(updatePost(ownProps.title, ownProps.text, ownProps.id));\n\n        case 'showUpdateForm':\n          return dispatch(showUpdateForm(ownProps.data));\n\n        case 'showPostDetail':\n          return dispatch(showPostDetail(ownProps.data));\n\n        case 'setPostsFilter':\n          return dispatch(setPostsFilter(ownProps.filter));\n      }\n    }\n\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Button);","map":{"version":3,"sources":["/var/www/reactapps/testing-app-refactoring/src/containers/Buttons/Button.js"],"names":["connect","deletePost","createPost","showForm","showUpdateForm","updatePost","showPostDetail","setPostsFilter","Button","put","takeEvery","FormDataText","action","mapStateToProps","state","ownProps","classes","result","getButtonText","showElement","buttonText","formState","form","filter","v","pop","enabled","hideForm","hide","doubleAction","mapDispatchToProps","dispatch","onClick","redirrectTo","undefined","window","location","href","title","text","id","data"],"mappings":"AAAA,SAAQA,OAAR,QAAuB,aAAvB;AACA,SACIC,UADJ,EAEIC,UAFJ,EAGIC,QAHJ,EAIIC,cAJJ,EAKIC,UALJ,EAMIC,cANJ,EAOIC,cAPJ,QAQO,eARP;AASA,OAAOC,MAAP,MAAmB,iCAAnB;AACA,SAAQC,GAAR,EAAaC,SAAb,QAA6B,oBAA7B;AACA,SAAQC,YAAR,QAA4B,SAA5B;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,QAAhC,EAA0C;AACtC,SAAO;AACHC,IAAAA,OAAO,EAAED,QAAQ,CAACC,OADf;AAEHC,IAAAA,MAAM,EAAEC,aAAa,CAACJ,KAAD,EAAQC,QAAR;AAFlB,GAAP;AAIH;AAED;;;;;;;;;;AAQA,SAASG,aAAT,CAAuBJ,KAAvB,EAA8BC,QAA9B,EAAwC;AACpC,MAAI,CAACA,QAAQ,CAACI,WAAd,EAA2B;AACvB,WAAOJ,QAAQ,CAACK,UAAhB;AACH;;AACD,MAAIC,SAAS,GAAGP,KAAK,CAACQ,IAAN,CAAWC,MAAX,CAAkBC,CAAC,IAAIA,CAAC,CAACL,WAAF,KAAkBJ,QAAQ,CAACI,WAAlD,EAA+DM,GAA/D,EAAhB;;AACA,MAAI,CAACJ,SAAL,EAAgB;AACZ,WAAON,QAAQ,CAACK,UAAhB;AACH;;AACD,SAAOC,SAAS,CAACK,OAAV,GAAoBf,YAAY,CAACgB,QAAjC,GAA4CZ,QAAQ,CAACK,UAA5D;AACH;;AAED,UAAUQ,IAAV,GAAiB;AACb,QAAMnB,GAAG,CAACN,QAAQ,CAAC,gBAAD,CAAT,CAAT;AACH;;AAED,OAAO,UAAU0B,YAAV,GAAyB;AAC5B,QAAMnB,SAAS,CAAC,aAAD,EAAgBkB,IAAhB,CAAf;AACH;AAED;;;;;;;;;;AASA,SAASE,kBAAT,CAA4BC,QAA5B,EAAsChB,QAAtC,EAAgD;AAE5C,SAAO;AACHiB,IAAAA,OAAO,GAAI;AAEP,UAAIjB,QAAQ,CAACkB,WAAT,KAAyBC,SAA7B,EAAwC;AACpCC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,WAAvB;AACA;AACH;;AAED,UAAIzB,MAAM,GAAGG,QAAQ,CAACH,MAAtB;;AACA,cAAQA,MAAR;AACI,aAAK,UAAL;AACI,iBAAOmB,QAAQ,CAAC5B,QAAQ,CAACY,QAAQ,CAACI,WAAV,CAAT,CAAf;;AACJ,aAAK,YAAL;AACI,iBAAOY,QAAQ,CAAC7B,UAAU,CAACa,QAAQ,CAACuB,KAAV,EAAiBvB,QAAQ,CAACwB,IAA1B,CAAX,CAAf;;AACJ,aAAK,YAAL;AACI,iBAAOR,QAAQ,CAAC9B,UAAU,CAACc,QAAQ,CAACyB,EAAV,CAAX,CAAf;;AACJ,aAAK,YAAL;AACI,iBAAOT,QAAQ,CAAC1B,UAAU,CAACU,QAAQ,CAACuB,KAAV,EAAiBvB,QAAQ,CAACwB,IAA1B,EAAgCxB,QAAQ,CAACyB,EAAzC,CAAX,CAAf;;AACJ,aAAK,gBAAL;AACI,iBAAOT,QAAQ,CAAC3B,cAAc,CAACW,QAAQ,CAAC0B,IAAV,CAAf,CAAf;;AACJ,aAAK,gBAAL;AACI,iBAAOV,QAAQ,CAACzB,cAAc,CAACS,QAAQ,CAAC0B,IAAV,CAAf,CAAf;;AACJ,aAAK,gBAAL;AACI,iBAAOV,QAAQ,CAACxB,cAAc,CAACQ,QAAQ,CAACQ,MAAV,CAAf,CAAf;AAdR;AAgBH;;AAzBE,GAAP;AA2BH;;AAED,eAAevB,OAAO,CAClBa,eADkB,EAElBiB,kBAFkB,CAAP,CAGbtB,MAHa,CAAf","sourcesContent":["import {connect,} from 'react-redux'\nimport {\n    deletePost,\n    createPost,\n    showForm,\n    showUpdateForm,\n    updatePost,\n    showPostDetail,\n    setPostsFilter\n} from '../../actions'\nimport Button from '../../components/Buttons/Button'\nimport {put, takeEvery} from 'redux-saga/effects'\nimport {FormDataText} from  '../Form'\nimport action from '../../index'\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        classes: ownProps.classes,\n        result: getButtonText(state, ownProps),\n    }\n}\n\n/**\n * Set text for \"show/hide form\" button\n * ( if this button have prop 'showElement')\n *\n * @param state\n * @param ownProps\n * @returns {string|*}\n */\nfunction getButtonText(state, ownProps) {\n    if (!ownProps.showElement) {\n        return ownProps.buttonText\n    }\n    let formState = state.form.filter(v => v.showElement === ownProps.showElement).pop();\n    if (!formState) {\n        return ownProps.buttonText\n    }\n    return formState.enabled ? FormDataText.hideForm : ownProps.buttonText\n}\n\nfunction* hide() {\n    yield put(showForm('form-element-1'))\n}\n\nexport function* doubleAction() {\n    yield takeEvery('CREATE_POST', hide)\n}\n\n/**\n *\n * mapDispatchToProps\n * adds event to our prop. We can use it from Button component as well.\n *\n * @param dispatch\n * @param ownProps\n * @returns {{onClick(): (*|*|*|*|*|*|*)}|*}\n */\nfunction mapDispatchToProps(dispatch, ownProps) {\n\n    return {\n        onClick () {\n\n            if (ownProps.redirrectTo !== undefined) {\n                window.location.href = \"/mainPage\";\n                return ;\n            }\n\n            let action = ownProps.action;\n            switch (action) {\n                case 'showForm':\n                    return dispatch(showForm(ownProps.showElement));\n                case 'createPost':\n                    return dispatch(createPost(ownProps.title, ownProps.text));\n                case 'deletePost':\n                    return dispatch(deletePost(ownProps.id));\n                case 'updatePost':\n                    return dispatch(updatePost(ownProps.title, ownProps.text, ownProps.id));\n                case 'showUpdateForm':\n                    return dispatch(showUpdateForm(ownProps.data));\n                case 'showPostDetail':\n                    return dispatch(showPostDetail(ownProps.data));\n                case 'setPostsFilter':\n                    return dispatch(setPostsFilter(ownProps.filter))\n            }\n        }\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Button)"]},"metadata":{},"sourceType":"module"}